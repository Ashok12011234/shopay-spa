## <addr>:<port> to listen on for HTTP/HTTPS clients
 http_address = ":8000"
# https_address = ":443"

## Are we running behind a reverse proxy? Will not accept headers like X-Real-Ip unless this is set.
 reverse_proxy = false

## TLS Settings
# tls_cert_file = ""
# tls_key_file = ""

## the OAuth Redirect URL.
# defaults to the "https://" + requested host header + "/oauth2/callback"
 provider = "oidc"
 provider_display_name="Asgardeo"

redirect_url = "http://localhost:8000/oauth2/callback"

#IS
#oidc_issuer_url = "https://localhost:9443/oauth2/token"
#oidc_jwks_url = "https://localhost:9443/oauth2/jwks"
#redeem_url = "https://localhost:9443/oauth2/token"
#login_url="https://localhost:9443/oauth2/authorize"
#profile_url= "https://localhost:9443/oauth2/userinfo"
#validate_url= "https://localhost:9443/oauth2/introspect"
#scope= "openid email"

#google
oidc_issuer_url = "https://accounts.google.com"
login_url="https://accounts.google.com/o/oauth2/v2/auth"
scope= "openid email"
#Asgardeo
#oidc_issuer_url = "https://api.asgardeo.io/t/akumar/oauth2/token"
#login_url="https://api.asgardeo.io/t/akumar/oauth2/authorize"
#redeem_url = "https://api.asgardeo.io/t/akumar/oauth2/token"
#profile_url= "https://api.asgardeo.io/t/akumar/oauth2/userinfo"
#validate_url= "https://api.asgardeo.io/t/akumar/oauth2/introspect"
#scope= "openid email"
## the http url(s) of the upstream endpoint. If multiple, routing is based on path
 upstreams = [
    "http://myapp:80",
   "http://backend:3001/api/orders",
    "http://backend:3001/api/offers",
    "http://backend:3001/api/get",
    "http://backend:3001/api/getProduct",
    "http://backend:3001/api/getCustomAttribute",
    "http://api:4001/secured_api"

 ]
skip_auth_regex="/home|/cart|/static/*|/product/*|/api/getProduct|/api/getCustomAttribute|/images/*|/api/get"


skip_provider_button=true
## Logging configuration
#logging_filename = ""
#logging_max_size = 100
#logging_max_age = 7
#logging_local_time = true
#logging_compress = false
#standard_logging = true
#standard_logging_format = "[{{.Timestamp}}] [{{.File}}] {{.Message}}"
#request_logging = true
#request_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
#auth_logging = true
#auth_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] [{{.Status}}] {{.Message}}"

## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream
 pass_basic_auth = true
 pass_user_headers = true
pass_authorization_header=true
## pass the request Host Header to upstream
## when disabled the upstream Host is used as the Host Header
 pass_host_header = true

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
 email_domains = "*"
 

insecure_oidc_allow_unverified_email= true
insecure_oidc_skip_issuer_verification= true
insecure_oidc_skip_nonce= true
## The OAuth Client ID, Secret
#wso2
 #client_id = "c9ezaKLSRjaEOUhrqUSAoVM_4xca"
 #client_secret = "atPmZA8SZslMvtxoSfSffFpFjQUa"

#Asgardeo
#client_id = "RgLEePU0YL7zFzGB7ECXOppt3qoa"
#client_secret = "5oNOC3jD_EHtJ2WUDi6jFgRlFpAa"


#google
 client_id = "880386795823-olrdr7047el8skubcoaa02avc13lql6b.apps.googleusercontent.com"
 client_secret = "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"

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
pass_access_token = true

## Authenticated Email Addresses File (one email per line)
## authenticated_emails_file = ""

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -B" for bcrypt encryption
## enabling exposes a username/login signin form
# htpasswd_file = ""

## bypass authentication for requests that match the method & path. Format: method=path_regex OR path_regex alone for all methods
# skip_auth_routes = [
#   "GET=^/probe",
#   "^/metrics"
# ]

## mark paths as API routes to get HTTP Status code 401 instead of redirect to login page
# api_routes = [
#   "^/api
# ]

## Templates
## optional directory with custom sign_in.html and error.html
# custom_templates_dir = ""

## skip SSL checking for HTTPS requests
ssl_insecure_skip_verify = true


## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
cookie_name = "oauth2_proxy"
cookie_secret = "5S5wk5A5O6MkKfZZ"
cookie_domains = "localhost"
cookie_expire = "1h"
cookie_refresh = "0.5h"
cookie_secure = false
cookie_httponly = false
